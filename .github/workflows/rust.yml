name: Rust

on:
  push:
    tags:
      - "v*"
    #branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        #os: [ubuntu-18.04, macos-latest, windows-latest]
        os: [ubuntu-18.04]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Download cached builds
        run: wget https://next-slide-please.com/downloads/Linux.zip && wget https://next-slide-please.com/downloads/Windows.zip && wget https://next-slide-please.com/downloads/macOS.zip

      - name: Upload build (Linux)
        uses: actions/upload-artifact@v2
        with:
          name: Linux
          path: Linux.zip

      - name: Upload build (Windows)
        uses: actions/upload-artifact@v2
        with:
          name: Windows
          path: Windows.zip

      - name: Upload build (macOS)
        uses: actions/upload-artifact@v2
        with:
          name: macOS
          path: macOS.zip
#    - uses: actions/checkout@v2
#
#    - uses: actions-rs/toolchain@v1
#      with:
#        profile: minimal
#        toolchain: stable
#
#    - uses: Swatinem/rust-cache@v1
#
#    - name: "Prepare: Install dependencies (Linux)"
#      if: ${{ runner.os == 'Linux' }}
#      run: sudo apt-get update && sudo apt-get install libssl-dev libudev-dev libgtk-3-dev
#
#    - name: "Prepare: Install `cargo bundle` (macOS)"
#      run: cargo install cargo-bundle
#      if: ${{ runner.os == 'macOS' }}
#
#    - name: Build (Window / Linux)
#      run: cargo build --verbose --release
#      if: ${{ runner.os != 'macOS' }}
#
#    - name: Build app bundle (macOS)
#      run: cargo bundle --release
#      if: ${{ runner.os == 'macOS' }}
#
#    - name: Zip app bundle (macOS)
#      if: ${{ runner.os == 'macOS' }}
#      working-directory: target/debug/bundle/osx/
#      run: zip -r NextSlidePlease.zip .
#
#    - name: Upload build (macOS)
#      if: ${{ runner.os == 'macOS' }}
#      uses: actions/upload-artifact@v2
#      with:
#        name: macOS
#        path: target/debug/bundle/osx/NextSlidePlease.zip
#
#    - name: Upload build (Windows)
#      if: ${{ runner.os == 'Windows' }}
#      uses: actions/upload-artifact@v2
#      with:
#        name: Windows
#        path: target/release/client.exe
#
#    - name: Upload build (Linux)
#      if: ${{ runner.os == 'Linux' }}
#      uses: actions/upload-artifact@v2
#      with:
#        name: Linux
#        path: target/release/client


  release:
    name: Create Github Release
    if: contains(github.ref, 'refs/tags/v')
    needs: [build]
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/download-artifact@v2

    - name: List contents
      run: ls -lhR

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: true

    - name: Upload release assets (Linux)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Linux/Linux.zip
        asset_name: Linux.zip
        asset_content_type: application/zip

    - name: Upload release assets (Windows)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Windows/Windows.zip
        asset_name: Windows.zip
        asset_content_type: application/zip

    - name: Upload release assets (macOS)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./macOS/macOS.zip
        asset_name: macOS.zip
        asset_content_type: application/zip
